# CEH Information Gateway - Vagrant Box

This is the CEH development box, it will create an instance of the CEH Catalogue along with it's supporting services (e.g. solr, mapserver)

## Structure

Inside the vagrant box there are a few git repositories which are checked out. 

Directories will be shared with your host machine unless the environment variable *VAGRANT_DISABLE_SHARING* is set to true

### /opt/ceh-catalogue -> ssh://git@stash.ceh.ac.uk:7999/cig/catalogue.git

  A dump of the software repository, this contains things like the templates for the 
  content generated by the web application.

  This directory will be mapped to your host machine. See **catalogue** for the contents.

### /etc/ceh-catalogue -> ssh://git@stash.ceh.ac.uk:7999/cig/catalogue-config.git

  This directory contains all of the configuration options for all of the environments.

  It is the development.properties which is relevant for the vagrant box.


### /var/ceh-catalogue/datastore -> ssh://git@stash.ceh.ac.uk:7999/cig/tcExport.git

  This contains a dump of test data for the vagrant box to use. 

## Getting started

To get the project running. Install :

* vagrant
* vagrant_vmware plugin

Then in a bash window run 

    vagrant up

### Having trouble getting it up? - When resuming

This is probally because the shared folders from you host are attached to your vagrant box after startup. This means that certain services are kicked off before the data they require is present.

To get around this, we maintain a bash script of all the services which need restarting.

    ./vagrant-resume.sh

Once you are up and running, try visiting one of the [metadata](https://localhost:8080/documents/ff55462e-38a4-4f30-b562-f82ff263d9c3) documents in your browser. Note that the server is using **https** on port 8080

## Testing

The vagrant box can be functionally tested using capybara and selenium. The tests for this are written in rspec, to run these and drive the chrome browser from a windows box you will need to:

* Install ruby + [bundler](http://bundler.io/) 

  If you are using babun, you can install all the prerequisite packages using pact. If you have a traditional ruby windows installation already, make sure you take this off the PATH variable or uninstall it altogether.

        pact install ruby
        pact install libiconv
        pact install patch
        gem install bundler

* Get a copy of the [chromedriver](http://ladist.nerc-lancaster.ac.uk/apps/selenium/chromedriver-2.10_win32.exe). Save it somewhere as *chromedriver* and make sure that it is accessable from your PATH variable

* Install the gem bundle using. Nokogiri will be installed here and may need to build some components. This step may take some time.

        bundle install

* Then you can execute your tests

        bundle exec rspec

* You can specify particular browsers to test in (as long as they have been set up in the browsers_helper.rb) by:

        BROWSERS=chrome,internet_explorer bundle exec rspec

* Sit back and watch your chrome instance run through your test suite

### Running the tests headlessly

If you want to execute the tests within xvfb, then set the environment variable **HEADLESS** to true. Chrome will be started up inside xvfb. Obviously your box will need to have xvfb installed.