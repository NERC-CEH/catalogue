plugins {
    id 'war'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'com.avast.gradle.docker-compose' version '0.6.12'
    id 'java'
}

ext {
    cehComponentsVersion = '1.0.46'
    springVersion = '5.0.1.RELEASE'
    springSecurityVersion = '5.0.1.RELEASE'
    jacksonVersion = '2.11.3'
    lombokVersion = '1.18.12'
}

tasks.withType(JavaCompile) {
    options.incremental = true
    options.compilerArgs.add '-Xlint:deprecation'
}

war {
    archiveFileName = 'ROOT.war'
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

composeUp.dependsOn war

repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url 'https://dl.bintray.com/palantir/releases' }
    mavenCentral()
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

testSets {
    integrationTest
}

dockerCompose {
    useComposeFiles = ['../docker-compose.yml', '../docker-compose-chrome.yml']
    forDefault {
        useComposeFiles = ['../docker-compose.yml', '../docker-compose.override.yml']
    }
}

dockerCompose.isRequiredBy(integrationTest)

integrationTest.doFirst {
    dockerCompose.exposeAsSystemProperties(integrationTest)
}

dependencies {
    implementation 'com.nimbusds:nimbus-jose-jwt:9.1.2'
    implementation "uk.ac.ceh.components:datastore-git:${cehComponentsVersion}"
    implementation "uk.ac.ceh.components:userstore-crowd:${cehComponentsVersion}"
    implementation "uk.ac.ceh.components:userstore-inmemory:${cehComponentsVersion}"
    implementation "uk.ac.ceh.components:springsecurity-userstore:${cehComponentsVersion}"
    implementation 'org.hibernate.validator:hibernate-validator:6.0.1.Final'
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}"
    implementation "com.google.guava:guava:29.0-jre"
    implementation("org.springframework:spring-core:${springVersion}") {
        exclude(module: 'commons-logging')
    }
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.springframework:spring-context-support:${springVersion}"
    implementation("org.apache.jena:jena-tdb:3.4.0") {
        exclude(module: 'slf4j-log4j12')
        exclude(module: 'log4j')
    }
    implementation 'commons-fileupload:commons-fileupload:1.3.3'
    implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-core:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"
    implementation "net.sf.ehcache:ehcache:2.10.4"
    implementation("org.apache.solr:solr-solrj:8.3.1") {
        exclude(module: 'slf4j-api')
        exclude(module: 'slf4j-log4j12')
        exclude(module: 'log4j')
    }
    implementation "com.vividsolutions:jts:1.13"
    implementation "net.lingala.zip4j:zip4j:1.2.4"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "org.slf4j:jcl-over-slf4j:1.7.25"
    implementation "org.freemarker:freemarker:2.3.23"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testCompileOnly 'junit:junit:4.13'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
    testImplementation("org.junit.platform:junit-platform-runner:1.7.1")
    testImplementation('org.mockito:mockito-junit-jupiter:2.23.0'){
        exclude(module: 'org.hamcrest-core')
    }
    testImplementation('org.mockito:mockito-core:3.3.3') {
        exclude(module: 'org.hamcrest-core')
    }
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compileOnly  "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
    integrationTestImplementation 'org.seleniumhq.selenium:selenium-remote-driver:3.8.1'
    integrationTestImplementation 'org.seleniumhq.selenium:selenium-chrome-driver:3.8.1'
    implementation 'com.jayway.jsonpath:json-path:2.3.0'
    integrationTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

test {
    useJUnitPlatform()
    useJUnitPlatform {
        includeEngines 'junit-vintage'
        // excludeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}